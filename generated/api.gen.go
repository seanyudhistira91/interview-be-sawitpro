// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// LoginErrorResponse defines model for LoginErrorResponse.
type LoginErrorResponse struct {
	Message string `json:"message"`
}

// LoginParam defines model for LoginParam.
type LoginParam struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id    int    `json:"id"`
	Token string `json:"token"`
}

// MyProfileErrorResponse defines model for MyProfileErrorResponse.
type MyProfileErrorResponse struct {
	Message string `json:"message"`
}

// MyProfileResponse defines model for MyProfileResponse.
type MyProfileResponse struct {
	Name        string `json:"name"`
	PhoneNumber string `json:"phoneNumber"`
}

// RegistrationErrorResponse defines model for RegistrationErrorResponse.
type RegistrationErrorResponse struct {
	Message string `json:"message"`
}

// RegistrationParam defines model for RegistrationParam.
type RegistrationParam struct {
	FullName    string `json:"fullName"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	Id int `json:"id"`
}

// UpdateProfileErrorResponse defines model for UpdateProfileErrorResponse.
type UpdateProfileErrorResponse struct {
	Message string `json:"message"`
}

// UpdateProfileParam defines model for UpdateProfileParam.
type UpdateProfileParam struct {
	FullName    *string `json:"fullName,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// UpdateProfileResponse defines model for UpdateProfileResponse.
type UpdateProfileResponse struct {
	Id int `json:"id"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginParam

// RegistrationJSONRequestBody defines body for Registration for application/json ContentType.
type RegistrationJSONRequestBody = RegistrationParam

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = UpdateProfileParam

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This is login endpoint.
	// (POST /login)
	Login(ctx echo.Context) error
	// This is my profile endpoint.
	// (GET /my-profile)
	MyProfile(ctx echo.Context) error
	// This is registration endpoint.
	// (POST /registration)
	Registration(ctx echo.Context) error
	// This is update profile endpoint.
	// (PATCH /update-profile)
	UpdateProfile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// MyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) MyProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MyProfile(ctx)
	return err
}

// Registration converts echo context to params.
func (w *ServerInterfaceWrapper) Registration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Registration(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/my-profile", wrapper.MyProfile)
	router.POST(baseURL+"/registration", wrapper.Registration)
	router.PATCH(baseURL+"/update-profile", wrapper.UpdateProfile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWTW+jSBD9K6h2b8saf6yiXU6bbDZSRnEU5UNziHxoQ9l0Brp7qptMkMV/H3Xj2GDj",
	"j0S252QM1VXFq/fqMYNIZkoKFEZDOAMdJZgxd3kjp1z8TyTpHrWSQqO9q0gqJMPRxWSoNZu6B6ZQCCFo",
	"Q1xMoSx9IPyec8IYwudF4Mh/D5TjF4wMlH5V6I4Ry9YLKKb1D0mxvcY3lqnUns2Kf+/mD3rgr5b2QSVS",
	"4G2ejZGaB/846//d7w8Gg36/v35wped6Fn/ZycZX2AwTj2sIcWFwimSPGfkNxW7weAzvsW3Fh8UdyQlP",
	"8RTDWhTbXEewrK3I2li2N+GyNM+09XOPU64NMcPlSchar7eBs5M8TW/nGCypd04mycm7RGHAh4y93aCY",
	"mgTCs64PGRfvfwdtfN5HBR9MuadEall7gx1Zt+pngcoOKdUB/qii1nXTVuFJxczgCTXTKPgh0gyLqyVs",
	"B1xz21s8BuylDxqjnLgpHqzHVPkukBHSeW75NIOx+3clKWMGQvjy9RH8ypFspurp8nUSYxSUNjEXE2nP",
	"pzzCedvVDoLh9aPbs9w4XJ40kveA9MojC+grkuZSQAi9TrfTtZFSoWCKQwgDd8uS1SSu1yC1S95hIrWx",
	"vxYZx9PrGMLKA6CCArW5kHFhgyIpjNV8OAOmVMojdyJ40VIsDdde/U44gRB+C5aOHMztOKhZZNmE21CO",
	"7kY1Mtdpv9s9bOUFIVzxGHVEXJkKOhfgEZqchEXwr0MXbyq0pYMLFnv3Fei6IlqeZYwKCOEx4drj2nOj",
	"81DESnJhOi4qyIo/VUV428cUW2a6cDs4IsTrltryksPCm0c1sB4cvoudeF9JGvM4RuFFMsZOQ9sQPjdV",
	"/TwqR20TyQpvDv7qWKhmAJvVVreJI4lu3er30l7vKA1sG0g97khK3PyZ9TlB1oe8SoDceVFdm4qZKFnn",
	"QMO0jkSCFu8+8QZut+YW2KvAI6+JLR9P+6wK28w/v6iZ/6SYpDwy3iUz7HNbq6Jm6+Zy6ch+UrhsOaXz",
	"b5QwCFIZsTSxe6wclT8DAAD//8WT++9zDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
